REPORT ZMKS_SESSION_METHOD.

TYPES : BEGIN OF LTY_DATA,
  MATNR TYPE MATNR,
  MBRSH TYPE MBRSH,
  MTART TYPE MTART,
  MAKTX TYPE MAKTX,
  MEINS TYPE MEINS,
  END OF LTY_DATA.

DATA : LT_DATA TYPE TABLE OF LTY_DATA.
DATA : LS_DATA TYPE LTY_DATA.
DATA : LV_FILE TYPE STRING.
DATA : LT_BDCDATA TYPE TABLE OF BDCDATA.
DATA : LS_BDCDATA TYPE BDCDATA.
DATA : LT_MESSTAB TYPE TABLE OF BDCMSGCOLL.
DATA : LS_MESSTAB TYPE BDCMSGCOLL.
DATA : LV_MESSAGE TYPE STRING.
DATA : LV_GROUP TYPE APQI-GROUPID VALUE 'MM01_UPLOAD'.
PARAMETERS : P_FILE TYPE LOCALFILE.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  CALL FUNCTION 'F4_FILENAME'
    EXPORTING
      PROGRAM_NAME  = SYST-CPROG
      DYNPRO_NUMBER = SYST-DYNNR
      FIELD_NAME    = ' '
    IMPORTING
      FILE_NAME     = P_FILE.

  LV_FILE = P_FILE.

START-OF-SELECTION.
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME            = LV_FILE
      HAS_FIELD_SEPARATOR = 'X'
    TABLES
      DATA_TAB            = LT_DATA
    EXCEPTIONS
      OTHERS              = 17.
  IF SY-SUBRC <> 0.
    WRITE: / 'Error uploading file'.
    EXIT.
  ENDIF.

  CALL FUNCTION 'BDC_OPEN_GROUP'
    EXPORTING
      CLIENT = SY-MANDT
*     DEST   = FILLER8
      GROUP  = 'MM01_GRP'
*     HOLDDATE                  = FILLER8
      KEEP   = 'X'
      USER   = SY-UNAME
*     RECORD = FILLER1
*     PROG   = SY-CPROG
*     DCPFM  = '%'
*     DATFM  = '%'
*   IMPORTING
*     QID    =
*   EXCEPTIONS
*     CLIENT_INVALID            = 1
*     DESTINATION_INVALID       = 2
*     GROUP_INVALID             = 3
*     GROUP_IS_LOCKED           = 4
*     HOLDDATE_INVALID          = 5
*     INTERNAL_ERROR            = 6
*     QUEUE_ERROR               = 7
*     RUNNING                   = 8
*     SYSTEM_LOCK_ERROR         = 9
*     USER_INVALID              = 10
*     OTHERS = 11
    .
  IF SY-SUBRC <> 0.
    WRITE: / 'Error opening BDC session'.
    EXIT.
  ENDIF.


  LOOP AT LT_DATA INTO LS_DATA.


    PERFORM BDC_DYNPRO      USING 'SAPLMGMM' '0060'.
    PERFORM BDC_FIELD       USING 'BDC_CURSOR' 'RMMG1-MTART'.
    PERFORM BDC_FIELD       USING 'BDC_OKCODE' '=ENTR'.
    PERFORM BDC_FIELD       USING 'RMMG1-MATNR' LS_DATA-MATNR.
    PERFORM BDC_FIELD       USING 'RMMG1-MBRSH' LS_DATA-MBRSH.
    PERFORM BDC_FIELD       USING 'RMMG1-MTART' LS_DATA-MTART.

    PERFORM BDC_DYNPRO      USING 'SAPLMGMM' '0070'.
    PERFORM BDC_FIELD       USING 'BDC_CURSOR' 'MSICHTAUSW-DYTXT(01)'.
    PERFORM BDC_FIELD       USING 'BDC_OKCODE' '=ENTR'.
    PERFORM BDC_FIELD       USING 'MSICHTAUSW-KZSEL(01)' 'X'.

    PERFORM BDC_DYNPRO      USING 'SAPLMGMM' '4004'.
    PERFORM BDC_FIELD       USING 'BDC_OKCODE' '=BU'.
    PERFORM BDC_FIELD       USING 'MAKT-MAKTX' LS_DATA-MAKTX.
    PERFORM BDC_FIELD       USING 'MARA-MEINS' 'KG'.
    PERFORM BDC_FIELD       USING 'MARA-MTPOS_MARA' 'NORM'.

    CALL FUNCTION 'BDC_INSERT'
      EXPORTING
        TCODE     = 'MM01'
      TABLES
        DYNPROTAB = LT_BDCDATA.
    IF SY-SUBRC <> 0.
      WRITE: / 'Error inserting BDC data'.
    ENDIF.
    REFRESH : LT_BDCDATA.
  ENDLOOP.

  CALL FUNCTION 'BDC_CLOSE_GROUP'
    EXCEPTIONS
      NOT_OPEN    = 1
      QUEUE_ERROR = 2
      OTHERS      = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.


  WRITE: / 'Batch session', LV_GROUP, 'created successfully.'.

FORM BDC_DYNPRO USING PROGRAM DYNPRO.
  CLEAR LS_BDCDATA.
  LS_BDCDATA-PROGRAM  = PROGRAM.
  LS_BDCDATA-DYNPRO   = DYNPRO.
  LS_BDCDATA-DYNBEGIN = 'X'.
  APPEND LS_BDCDATA TO LT_BDCDATA.
ENDFORM.

FORM BDC_FIELD USING FNAM FVAL.
  CLEAR LS_BDCDATA.
  LS_BDCDATA-FNAM = FNAM.
  LS_BDCDATA-FVAL = FVAL.
  APPEND LS_BDCDATA TO LT_BDCDATA.
ENDFORM.